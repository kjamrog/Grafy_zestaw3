#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Moduł zawierający: 
# funkcję sprawdzającą czy ciąg jest graficzny
# klasę Graph

import networkx as nx
import matplotlib.pyplot as plt

from random import randrange
from random import randint
from BaseGraph import BaseGraph
from BaseGraph import isGraphical


class Graph(BaseGraph):
	def __init__(self, seq):
		BaseGraph.__init__(self, seq)
		self.EV = self.makeEV()
		
	def makeEV(self):
		temp = [ [0 for j in i] for i in self.AM]
		for i in range(len(self.AM)):
			for j in range(i, len(self.AM)):
				if(self.AM[i][j] == 1):
					temp[i][j]=temp[j][i] = randint(1,9)
		return temp
		
	def draw(self):
		g = nx.Graph()
		for i in range(self.vertex):
			for j in range(i, self.vertex):
				if self.EV[i][j] != 0:
					g.add_edge(i, j, w=self.EV[i][j])
				
		pos = nx.shell_layout(g)
		nx.draw_networkx_nodes(g, pos, node_size=300)
		nx.draw_networkx_edges(g, pos)
		nx.draw_networkx_labels(g, pos)
		nx.draw_networkx_edge_labels(g, pos)

		plt.axis('off')
		plt.savefig("Graph.png")
		plt.close()
